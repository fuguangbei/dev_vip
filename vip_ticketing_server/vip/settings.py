# coding=utf-8
"""
Django settings for vip project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import vip.switches as switches

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'xt*xv#(6hznk1sgi%j+59nv9cy_-rdart=#v0wu1aeni7p323$'

# SECURITY WARNING: don't run with debug turned on in productiodn!
DEBUG = switches.DEBUG

# PROMOTION CODES NEVER GO INVALID WHEN TEST_PROMOTION_CODE IS SET TO TRUE
TEST_PROMOTION_CODE = switches.PROMOTION_CODE_ALWAYS_VALID

LOCAL = switches.USE_LOCAL_SERVER

# CUSTOM AUTHENTICATION SETTINGS
# ==============================
PIN_LEN = 6

PIN_REQUEST_INTERVAL = 30  # in secends

PIN_VALID_SECONDS = 5 * 60  # in seconds

AUTHENTICATION_BACKENDS = [
	'registrar.backends.VIPUserAuthBackend',
	'django.contrib.auth.backends.ModelBackend',
]

LOGIN_URL = '/require-login/'

SESSION_COOKIE_HTTPONLY = True
# ==============================

# REGISTRAR SETTINGS
# ==============================
PROMOTION_CODE_LEN = 8

AVATAR_SIZE = 650, 650

if LOCAL:
	HOST = "http://localhost:8000"
else:
	# HOST = "http://120.76.126.214:8000"
	HOST = "http://23.106.128.208:8000"

# self
# YUNPIAN_API_KEY = "ec2741942738357c2a163d9d2fb9dda0"
# YUNPIAN_SECRET = "8b528237"

# client
YUNPIAN_API_KEY = "299604d9ded6668680ffc0c41f8c990a"
YUNPIAN_SECRET = "3b13c3e0"

SMS_TEMPLATE_PIN = "您本次的验证码为{0}，5分钟内有效，感谢使用"
SMS_TEMPLATE_PWD = "尊敬的代理用户, 您的后台账户登录密码为{0}, 请妥善保管. 谢谢, 祝您生活愉快!"
# ==============================

# MERCHANDISE SETTINGS
# ==============================
CKEDITOR_CONFIGS = {
	'default': {
		'toolbar': (
			['Bold', 'Italic', 'Underline', 'Strike', '-', 'Subscript', 'Superscript'],
			['Styles', 'Format', 'TextColor', 'ImageButton'],
			['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', \
			 'Blockquote', 'CreateDiv', '-', 'JustifyLeft', 'JustifyCenter', \
			 'JustifyRight', 'JustifyBlock', '-', 'BidiLtr', 'BidiRtl', \
			 'Language']
		)
	}
}
CKEDITOR_UPLOAD_PATH = 'richtext_media/'

config_file_name = 'settings.yaml' if switches.UNIONPAY_USE_PRODUCTION else "settings_test_env.yaml"
UNIONPAY_CONFIG_PATH = os.path.join(BASE_DIR, 'unionpay', config_file_name)

LEVEL_1_WITHDRAW_RATE = .1
LEVEL_2_WITHDRAW_RATE = .1

IMAGE_SIZE_TABLE = {
	'tiny': (100, 100),
	'small': (300, 300),
	'medium': (600, 600),
	'large': (1300, 1300)
}
# ==============================

# CORS SETTINGS
# ==============================
CORS_ORIGIN_ALLOW_ALL = True
# ==============================

ALLOWED_HOSTS = ['*']

DEFAULT_CHARSET = 'utf-8'
# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'registrar.apps.RegistrarConfig',
	'api.apps.ApiConfig',
	'explore.apps.ExploreConfig',
	'merchandise.apps.MerchandiseConfig',
	'moments.apps.MomentsConfig',
	'notifications.apps.NotificationsConfig',
	'cms.apps.CmsConfig',
	'ckeditor',
	'ckeditor_uploader',
	'corsheaders',
]

MIDDLEWARE_CLASSES = [
	'django.middleware.security.SecurityMiddleware',
	'django.middleware.locale.LocaleMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'registrar.middleware.UserRestrictMiddleware',
]

ROOT_URLCONF = 'vip.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [os.path.join(BASE_DIR, 'templates')],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'vip.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
	'default': {
		# 'ENGINE': 'django.db.backends.sqlite3',
		# 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
		'ENGINE': 'django.db.backends.mysql',
		'NAME': 'vip_local' if LOCAL else 'vip_ticketing',
		# 'NAME': 'vip_test',
		# 'NAME': 'vip_local',
		# 'USER': 'vip_dev' if LOCAL else 'vip_admin',
		'USER': '',
		# 'PASSWORD': 'qwerasdf' if LOCAL else '',
		'PASSWORD': '',
		# 'HOST': '120.76.126.214' if LOCAL else 'localhost',
		'HOST': 'localhost',
		'PORT': 3306,
		'OPTIONS': {

		}
		# ... plus some other settings
	}
}

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'
#LANGUAGE_CODE = 'zh_hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = False

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

# if DEBUG:
# 	STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
# else:
STATIC_ROOT = os.path.join(BASE_DIR, 'static_deploy/')
# STATIC_ROOT = '/static/'

STATICFILES_DIRS = [
	os.path.join(BASE_DIR, 'static'),
	# os.path.join(BASE_DIR, 'cms', 'static'),
]

SERVERS = [
	'/Users/divestar/Pictures/vip_assets/',
	# '/Users/annesui/Projects/vip_ticketing/uploads/',
	'/root/vip_ticketing/upload_assets/vip_assets/',
	'/root/dev_projects/vip_ticketing/vip_assets/', # dev server aliyun
]
MEDIA_ROOT = SERVERS[0 if LOCAL else 1]

MEDIA_URL = '/assets/'

import mimetypes

mimetypes.add_type("image/svg+xml", '.svg', True)
mimetypes.add_type("image/svg+xml", '.svgz', True)
